/**
 * Dependencies
 */

require('colors');

var fs = require('fs'),
		http = require('http'),
		url = require('url'),
		QS = require('querystring');


/**
 * Helpers
 */

var ui = {
	PREF: '[ytdl] '.magenta,
	suc: function (toLog){
		console.log(ui.PREF + toLog.green.bold);
	},
	fin: function (toLog){
		console.log(ui.PREF + toLog.green.bold);
	},
	init: function (toLog){
		console.log(ui.PREF + toLog.yellow);
	},
	fail: function (toLog){
		console.log(ui.PREF + toLog.red.bold);
	},

	logStart: function (){ ui.init('Download started'); },
	logError: function (){ ui.fail('Download failed'); },
	logPush: function (){ ui.suc('Request item pushed'); },
	logItemInfo: function (){ uit.suc('Item info recieved'); },
	logDownload: function (){ uit.suc('Started downloading'); },
	logFinish: function (){ ui.fin('Download complete!');	 }
};

function adler32(str) {
	var a = 1, b = 0;

	for (i = 0; i < str.length; i++) {
		a = (a + str.charCodeAt(i)) % 65521;
		b = (b + a) % 65521;
	}

	return b << 16 | a;
}


/**
 * Globals
 */

var baseServiceUrl = 'http://www.youtube-mp3.org'
var baseYtUrl = "http://www.youtube.com/watch?v=";

var argv = process.argv.splice(2, process.argv.length);
if(argv.length === 0){
	ui.fail('Need atleast one video id, exiting now!');
	process.exit();
}
var idArray = argv;
var idCounter = 0;


/**
 * Download class object
 */

var Download = function (ytid){
	this.ytid = ytid;
	this.fns = [
		this.start, this.pushItem, this.getItemInfo,
		this.download, this.finish ];
};

Download.prototype.start = function (){
	ui.init('Starting the download for: ' + this.ytid);

	this.pushItem();
};

Download.prototype.pushItem = function (){
	ui.init('Pushing item..');
	var This = this;

	var qs = QS.stringify({
		item: baseYtUrl + this.ytid, el: 'na', bf: 'false'
	});

	var options = {
		hostname: 'www.youtube-mp3.org',
		path: '/a/pushItem/?'+qs,
		headers: {
			'Host': 'www.youtube-mp3.org',
			'Referer': 'http://www.youtube-mp3.org/',
			'Accept-Location': '*'
		}
	};

	var req = http.request(options, function(res) {
		var body = '';
		res.on('data', function (chunk) { body += chunk; });
		res.on('end', function (){
			if(body.length < 50){
				ui.suc('Succesfuly pushed: ' + body);
				This.getItemInfo();
			}
			else
				This.abort('Bad pushItem response!');
			
		});
	});

	req.on('error', function (err){
		This.abort('Request error!');
	});

	req.end();

};

Download.prototype.getItemInfo = function (){
	var This = this;
	ui.init('Getting item info..');

	var qs = QS.stringify({ video_id: this.ytid, ac: 'www' });

	var options = {
		hostname: 'www.youtube-mp3.org',
		path: '/a/itemInfo/?'+qs,
	};

	var req = http.request(options, function (res){
		var body = '';
		res.on('data', function (chunk) { body += chunk; });
		res.on('end', function (){
			var err = null;
			try{
				var trimmed = body.replace('info = ', '').slice(0, -1);
				var info = JSON.parse(trimmed),
						title = info.title;

				This.title = title;
				This.info = info;
			}
			catch(e){
				err = e;
			}

			if(!err){
				ui.suc('Succesfuly recieved item info for: `' + This.title + '`');
				This.download();
			}
			else{
				This.abort('Invalid item info recieved @ getItemInfo for id: ' + This.ytid +
					' - Quite likely the file is to large!');
			}

		});
	});

	req.on('error', function (err){
		This.abort('Request error!');
	});

	req.end();

};

Download.prototype.download = function (){
	var This = this;

	var now = (new Date).getTime();

	var qs = QS.stringify({
		ab: 256,
		video_id: This.ytid,
		h: This.info.h,
		r: now + '.' + adler32(This.ytid + now)
	});

	var options = {
		hostname: 'www.youtube-mp3.org',
		path: '/get/?'+qs
	};


	ui.init('Downloading and converting item: `' + this.title+'`');

	var urlReq = http.get('http://www.youtube-mp3.org/get?'+qs, function (urlRes){
		var data = '';
		urlRes.on('data', function (chunk){
			data += chunk;
		});

		urlRes.on('end', function (){
			var loc = urlRes.headers.location;

			var startTime = (new Date).getTime();

			try{
				var blobReq = http.get(loc, function (blobRes){
					if(blobRes.headers['content-type'] === 'application/octet-stream'){
						
						var output = fs.createWriteStream(This.title + ".mp3");

						output.on('finish', function (){
							ui.suc('File write succesful: `'+This.title+'.mp3`');
						});

						blobRes.pipe(output);

						var data = '',
								bytes = 0,
								chunks = 0,
								ctlen = blobRes.headers['content-length'];

						blobRes.on('data', function (chunk){
							data += chunk;
							bytes += chunk.length;
							chunks += 1;
						});

						blobRes.on('end', function (){
							var endTime = (new Date).getTime(),
									timeTaken = endTime - startTime,
									avgBytes = Math.round((bytes / timeTaken) * 1000),
									avgKbs = Math.round(((bytes / 1024) / timeTaken) * 1000);

							ui.suc('Download and conversion succesful: "' +
								This.title + '"\n       - total bytes: ' + ctlen + 
								'\n       - total chunks: ' + chunks +
								'\n       - time taken: ' + timeTaken + 'ms ' + 
								'\n       - avg. bytes/s: ' + avgBytes +
								'\n       - avg. kb/s: ' + avgKbs);

							This.finish();

						});

						blobRes.on('error', function (){
							This.abort('blobRes error');
						});

					}
				});
			}
			catch(e){ This.abort('Error in blobReq = http.get'); }

		});
	})

	urlReq.on('error', function (err){
		console.log(err);
	});

};

Download.prototype.finish = function (){
	ui.fin('Download and conversion task complete!');
};

Download.prototype.abort = function (msg){
	ui.fail('FAILURE: ' + msg);
};

for(var argvI=0; argvI < idArray.length; argvI+=1){
	var download = new Download(idArray[argvI]);
	download.start();
}

/** Sample long id's list
 * v8kYMMt9Ls4 VXa9tXcMhXQ C2PbG6KQKsE 8whaL7b4wjo ozzlnNRpHO4 9UOweeSdI2k LpHgG4jILa0 7QBkD1Xub3k PBexfpdKShY yIxX6vFNioc -j6egi1wqlo btqZo-rSZX0 Snvu7bAMXLg AvMwaBES7cg 5i0fXVNXF-M HE32tcojArI 1MnQx80nS9U pBk20ujrZZU xfdtB_4aCDo 26AsA5L6AoY c-9PlAF8p94 u45tjGTqNHo
 */