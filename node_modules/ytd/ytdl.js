var request = require('request'),
		fs = require('fs');

require('colors');


function adler32(str) {
    var a = 1, b = 0;

    for (i = 0; i < str.length; i++) {
        a = (a + str.charCodeAt(i)) % 65521;
        b = (b + a) % 65521;
    }

    return b << 16 | a;
}


var baseServiceUrl = 'http://www.youtube-mp3.org';
var baseYtUrl = "http://www.youtube.com/watch?v=";

var argv = process.argv.splice(2,process.argv.length);
// If no ytids are passed from terminal
if(argv.length === 0){
	console.log('Need atleast one video id'.red);
	process.exit();
}
var ids = argv,
		idCounter = 0;

// Namespace which resets @ loops
var NS = {};
NS.currentId = ids[idCounter]

var pushItem = {

	options: {
		url: baseServiceUrl + '/a/pushItem/',
		qs: {
			item: baseYtUrl + NS.currentId,
			el: 'na', bf: 'false'
		},
		headers: {
			'Host': 'www.youtube-mp3.org',
			'Referer': 'http://www.youtube-mp3.org/',
			'Accept-Location': '*'
		}
	},
	callback: function (err, res, body){
		if(err) console.log(err);
		else if(!body) console.log('Empty push response!'.red);
		else{ // Succes!
			console.log('pushItem done'.green);
			// NEXT \\
			request.get(itemInfo.options, itemInfo.callback);
		}
	}

};

var itemInfo = {

	options: {
		url: baseServiceUrl + '/a/itemInfo/',
		qs: {
			video_id: NS.currentId,
			ac: 'www',
			t: 'grp'
		}
	},
	callback: function (err, res, body){
		if(err) console.log(err);

		else{
			console.log('itemInfo done'.green);	

			if(body.indexOf('info = ') === -1){

				if(body === 'pushItemYTError();'){
					console.log('Video to long'.red);
				}
				else{
					console.log('Invalid response: '.red + body);
				}		

			}
			else{
				var info = JSON.parse(
					body.replace('info = ', '').replace(';', ''));

				NS.info = info;
				NS.title = info.title;
				NS.h = info.h;

				// NEXT \\
				download();
			}
			
		}
	}
};

function download(){
	var now = (new Date).getTime();

	var req = request({
		url: baseServiceUrl + '/get',
		qs: {
			ab: 256,
			video_id: NS.currentId,
			h: NS.h,
			r: now + "." + adler32(NS.currentId + now)
		}
	});

	delete NS.h;

	req.on('response', function (res){
		if(res.headers['content-type'] === 'application/octet-stream'){
			var output = fs.createWriteStream(NS.title + '.mp3');
			res.pipe(output);

			var len = res.headers['content-length'];
			var gotten = 0;

			res.on('data', function (chunk){
				gotten += chunk.length;
				console.log(gotten);
			});

			res.on('end', function (){
				console.log('Got all data');
			});

			output.on('finish', function (){
				console.log('Completely done!');
			})

			output.on('error', function (err){
				console.log('Download failed, output.error' + err);
			});

		}
		else{
			console.log('Failed to start download, wrong response header @ download'.red);
		}
	});

}

request.get(pushItem.options, pushItem.callback);

